{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"en-us/","title":"Sinen","text":""},{"location":"en-us/#summary","title":"Summary","text":"<p>Sinen is a toolkit for creative coding.  </p>"},{"location":"en-us/#community","title":"Community","text":"<p>Discord</p>"},{"location":"en-us/#under-construction","title":"Under Construction...","text":""},{"location":"en-us/cpp_api/","title":"C++ API","text":"<p>https://astomih.github.io/sinen/doxygen/</p>"},{"location":"en-us/lua_api/","title":"Lua API","text":"<pre><code>---@diagnostic disable: duplicate-index, lowercase-global, unused-local\n---@class sn\nsn = {\n    ---@class Vec3\n    ---@field x number\n    ---@field y number\n    ---@field z number\n    ---@field copy fun(self: Vec3): Vec3\n    ---@field length fun(self: Vec3): number\n    ---@field forward fun(self: Vec3, rotation: Vec3): Vec3\n    ---@field normalize fun(self: Vec3): Vec3\n    ---@field dot fun(self: Vec3, other: Vec3): number\n    ---@field cross fun(self: Vec3, other: Vec3): Vec3\n    ---@field lerp fun(self: Vec3, other: Vec3, t: number): Vec3\n    ---@field reflect fun(self: Vec3, n: Vec3): Vec3\n    ---@operator add(Vec3): Vec3\n    ---@operator sub(Vec3): Vec3\n    ---@operator mul(Vec3): Vec3\n    ---@operator div(Vec3): Vec3\n    ---@param x number?\n    ---@param y number?\n    ---@param z number?\n    ---@return Vec3\n    Vec3 = function(x, y, z) return {} end,\n\n    ---@param value number\n    ---@return Vec3\n    ---Initializes a Vec3 with the same value for x, y, z.\n    Vec3 = function(value) return {} end,\n\n    ---@class Vec3i\n    ---@field x integer\n    ---@field y integer\n    ---@field z integer\n    ---@operator add(Vec3i): Vec3i\n    ---@operator sub(Vec3i): Vec3i\n    ---@param x integer?\n    ---@param y integer?\n    ---@param z integer?\n    ---@return Vec3i\n    Vec3i = function(x, y, z)\n        return {}\n    end,\n\n    ---@param value integer\n    ---@return Vec3i\n    ---Initializes a Vec3i with the same value for x, y, z.\n    Vec3i = function(value)\n        return {}\n    end,\n\n    ---@class Vec2\n    ---@field x number\n    ---@field y number\n    ---@field copy fun(self: Vec2): Vec2\n    ---@field length fun(self: Vec2): number\n    ---@field normalize fun(self: Vec2): Vec2\n    ---@field dot fun(self: Vec2, other: Vec2): number\n    ---@field lerp fun(self: Vec2, other: Vec2, t: number): Vec2\n    ---@field reflect fun(self: Vec2, n: Vec2): Vec2\n    ---@operator add(Vec2): Vec2\n    ---@operator sub(Vec2): Vec2\n    ---@operator mul(Vec2): Vec2\n    ---@operator div(Vec2): Vec2\n    ---@param x number?\n    ---@param y number?\n    ---@return Vec2\n    Vec2 = function(x, y) return {} end,\n\n    ---@param value number\n    ---@return Vec2\n    ---Initializes a Vec2 with the same value for x, y.\n    Vec2 = function(value) return {} end,\n\n    ---@class Vec2i\n    ---@field x integer\n    ---@field y integer\n    ---@operator add(Vec2i): Vec2i\n    ---@operator sub(Vec2i): Vec2i\n    ---@param x integer?\n    ---@param y integer?\n    ---@return Vec2i\n    Vec2i = function(x, y) return {} end,\n\n    ---@param value integer\n    ---@return Vec2i\n    ---Initializes a Vec2i with the same value for x, y.\n    Vec2i = function(value) return {} end,\n\n    ---@class Texture\n    ---@field fill fun(self: Texture, color: Color)\n    ---@field blend fun(self: Texture, color: Color)\n    ---@field copy fun(self: Texture): Texture\n    ---@field load fun(self: Texture, path: string)\n    ---@field size fun(self: Texture): Vec2\n    ---@return Texture\n    Texture = function() return {} end,\n\n    ---@class Material\n    ---Set Texture. index is 1-based, optional.\n    ---@field set_texture fun(self:Material, texture: Texture, index: integer?)\n    ---@field append_texture fun(self: Material, texture: Texture)\n    ---@field clear fun(self: Material)\n    ---@field get_texture fun(self: Material, index: integer): Texture\n    ---@return Material\n    Material = function() return {} end,\n\n    ---@class RenderTexture\n    ---@field create fun(self: RenderTexture, x: integer, y: integer)\n    ---@return RenderTexture\n    RenderTexture = function() return {} end,\n\n    ---@class Music\n    ---@field load fun(self: Music, path: string)\n    ---@field play fun(self: Music)\n    ---@field set_volume fun(self: Music, volume: number)\n    ---@return Music\n    Music = function() return {} end,\n\n    ---@class Sound\n    ---@field load fun(self: Sound, path: string)\n    ---@field play fun(self: Sound)\n    ---@field set_volume fun(self: Sound, volume: number)\n    ---@field set_pitch fun(self: Sound, pitch: number)\n    ---@field set_listener fun(self: Sound, position: Vec3)\n    ---@field set_position fun(self: Sound, position: Vec3)\n    ---@return Sound\n    Sound = function() return {} end,\n\n    ---@class Camera\n    ---@field lookat fun(self: Camera, position: Vec3, target: Vec3, up: Vec3)\n    ---@field perspective fun(self: Camera, fov: number, aspect: number, near: number, far: number)\n    ---@field orthographic fun(self: Camera, left: number, right: number, bottom: number, top: number, near: number, far: number)\n    ---@field get_position fun(self: Camera): Vec3\n    ---@field get_target fun(self: Camera): Vec3\n    ---@field get_up fun(self: Camera): Vec3\n    ---@field is_aabb_in_frustum fun(self: Camera, aabb: AABB): boolean\n    Camera = function() end,\n\n    ---@class Camera2D\n    ---@field resize fun(self: Camera2D, size: Vec2)\n    ---@field window_ratio fun(self: Camera2D): Vec2\n    ---@field inv_window_ratio fun(self: Camera2D): Vec2\n    ---@field size fun(self: Camera2D): Vec2\n    ---@field half fun(self: Camera2D): Vec2\n    Camera2D = function() end,\n\n    ---@class Model\n    ---@field get_aabb fun(self: Model): AABB\n    ---@field load fun(self: Model, path: string)\n    ---@field load_sprite fun(self: Model)\n    ---@field load_box fun(self: Model)\n    ---@field get_bone_uniform_data fun(self: Model): UniformData\n    ---@field play fun(self: Model, positon: number)\n    ---@field update fun(self: Model, delta: number)\n    ---@return Model\n    Model = function() return {} end,\n\n    ---@class AABB\n    ---@field min Vec3\n    ---@field max Vec3\n    ---@field update_world fun(self: AABB, position: Vec3, scale: Vec3, modelAABB: AABB)\n    ---@return AABB\n    AABB = function() return {} end,\n\n    ---@class Timer\n    ---@field start fun(self: Timer)\n    ---@field stop fun(self: Timer)\n    ---@field is_started fun(self: Timer): boolean\n    ---@field set_time fun(self: Timer, time: number)\n    ---@field check fun(self: Timer): boolean\n    Timer = function() end,\n\n    ---@class UniformData\n    ---@field add fun(self: UniformData, value: any)\n    ---@field change fun(self: UniformData, index: integer, value: number)\n    ---@return UniformData\n    UniformData = function() return {} end,\n\n    ---@class Shader\n    ---@field load_vertex_shader fun(self: Shader, path: string, uniform_count: integer)\n    ---@field load_fragment_shader fun(self: Shader, path: string, uniform_count: integer)\n    ---@field compile_load_vertex_shader fun(self: Shader, source: string, uniform_count: integer)\n    ---@field compile_load_fragment_shader fun(self: Shader, source: string, uniform_count: integer)\n    ---@return Shader\n    Shader = function() return {} end,\n\n    ---@class Font\n    ---@field load fun(self: Font, size: integer, path: string?): nil\n    ---@field render_text fun(self: Font, texture: Texture, text: string, color: Color): Texture\n    ---@field resize fun(self: Font, size: integer)\n    ---@return Font\n    Font = function() return {} end,\n\n    ---@class Color\n    ---@field r number\n    ---@field g number\n    ---@field b number\n    ---@field a number\n    ---@param r number\n    ---@param g number\n    ---@param b number\n    ---@param a number\n    ---@return Color\n    Color = function(r, g, b, a) return {} end,\n\n    ---@return Color\n    Color = function() return {} end,\n\n    ---@class Draw2D\n    ---@field scale Vec2\n    ---@field position Vec2\n    ---@field rotation number\n    ---@field material Material\n    ---@field add fun(self: Draw2D, drawable: any)\n    ---@field at fun(self: Draw2D, x: number, y: number)\n    ---@field clear fun(self: Draw2D)\n    ---@param texture Texture?\n    ---@return Draw2D\n    Draw2D = function(texture) return {} end,\n\n    ---@class Draw3D\n    ---@field scale Vec3\n    ---@field position Vec3\n    ---@field rotation Vec3\n    ---@field material Material\n    ---@field model Model\n    ---@field isDrawDepth boolean\n    ---@field add fun(self: Draw3D, positon: Vec3, rotation: Vec3, scale: Vec3)\n    ---@field at fun(self: Draw3D, x: number, y: number, z: number)\n    ---@field clear fun(self: Draw3D)\n    ---@param texture Texture?\n    ---@return Draw3D\n    Draw3D = function(texture) return {} end,\n\n    ---@class Grid\n    ---@field at fun(self: Grid, x: integer, y: integer): integer\n    ---@field set fun(self: Grid, x: integer, y: integer, v: integer)\n    ---@field width fun(self: Grid): integer\n    ---@field height fun(self: Grid): integer\n    ---@field size fun(self: Grid): integer\n    ---@field clear fun(self: Grid)\n    ---@field resize fun(self: Grid, w: integer, h: integer)\n    ---@field fill fun(self: Grid, value: integer)\n    ---@param w integer\n    ---@param h integer\n    ---@return Grid\n    Grid = function(w, h) return {} end,\n\n    ---@class BFSGrid\n    ---@field width fun(self: BFSGrid): integer\n    ---@field height fun(self: BFSGrid): integer\n    ---@field find_path fun(self: BFSGrid, start: Vec2i, end_: Vec2i): any\n    ---@field trace fun(self: BFSGrid): Vec2\n    ---@field traceable fun(self: BFSGrid): boolean\n    ---@field reset fun(self: BFSGrid)\n    ---@param grid Grid\n    ---@return BFSGrid\n    BFSGrid = function(grid)\n        return {}\n    end,\n\n    ---@class GraphicsPipeline2D\n    ---@field set_vertex_shader fun(self: GraphicsPipeline2D, shader: Shader)\n    ---@field set_fragment_shader fun(self: GraphicsPipeline2D, shader: Shader)\n    ---@field build fun(self: GraphicsPipeline2D)\n    ---@return GraphicsPipeline2D\n    GraphicsPipeline2D = function() return {} end,\n\n    ---@class GraphicsPipeline3D\n    ---@field set_vertex_shader fun(self: GraphicsPipeline3D, shader: Shader)\n    ---@field set_vertex_instanced_shader fun(self: GraphicsPipeline3D, shader: Shader)\n    ---@field set_fragment_shader fun(self: GraphicsPipeline3D, shader: Shader)\n    ---@field set_animation fun(self: GraphicsPipeline3D, anim: any)\n    ---@field build fun(self: GraphicsPipeline3D)\n    ---@return GraphicsPipeline3D\n    GraphicsPipeline3D = function() return {} end,\n\n    ---@class Rect\n    ---@field x number\n    ---@field y number\n    ---@field width number\n    ---@field height number\n    ---@param x number?\n    ---@param y number?\n    ---@param width number?\n    ---@param height number?\n    ---@return Rect\n    Rect = function(x, y, width, height) return {} end,\n    ---@param position Vec2\n    ---@param size Vec2\n    ---@return Rect\n    Rect = function(position, size) return {} end,\n\n    ---@class Transform\n    ---@field position Vec3\n    ---@field rotation Vec3\n    ---@field scale Vec3\n    ---@return Transform\n    Transform = function() return {} end,\n\n    ---@class Collider\n    ---@field get_position fun(self: Collider): Vec3\n    ---@field get_velocity fun(self: Collider): Vec3\n    ---@field set_linear_velocity fun(self: Collider, velocity: Vec3)\n    Collider = {},\n\n    ---Static class\n    ---@class Script\n    ---@field load fun(path: string, basePath?: string)\n    Script = {},\n\n    ---Static class\n    ---@class FileSystem\n    ---@field enumerate_directory fun(path: string): table\n    FileSystem = {},\n\n    ---Static class\n    ---@class Random\n    ---@field get_range fun(a: number, b: number): number\n    ---@field get_int_range fun(a: number, b: number): number\n    Random = {},\n\n    ---Static class\n    ---@class Window\n    ---@field get_name fun(): string\n    ---@field size fun(): Vec2\n    ---@field half fun(): Vec2\n    ---@field resize fun(size: Vec2)\n    ---@field set_fullscreen fun(full: boolean)\n    ---@field rename fun(name: string)\n    ---@field resized fun(): boolean\n    Window = {},\n\n    ---Static class\n    ---@class Graphics\n    ---@field draw2d fun(draw2D: Draw2D)\n    ---@field draw3d fun(draw3D: Draw3D)\n    ---@field draw_rect fun(rect: Rect, color: Color, angle: number?)\n    ---@field draw_image fun(texture: Texture, rect: Rect, angle: number?)\n    ---@field draw_text fun(text: string, position: Vec2, color: Color?, fontSize: number?, angle: number?)\n    ---@field draw_model fun(model: Model, transform: Transform, material: Material)\n    ---@field set_camera fun(camera: Camera)\n    ---@field get_camera fun(): Camera\n    ---@field set_camera2d fun(camera: Camera2D)\n    ---@field get_camera2d fun(): Camera2D\n    ---@field get_clear_color fun(): Color\n    ---@field set_clear_color fun(c: Color)\n    ---@field bind_pipeline2d fun(pipe: GraphicsPipeline2D)\n    ---@field bind_default_pipeline2d fun()\n    ---@field bind_pipeline3d fun(pipe: GraphicsPipeline3D)\n    ---@field bind_default_pipeline3d fun()\n    ---@field set_uniform_data fun(binding: integer, data: UniformData)\n    ---@field set_render_target fun(rt: RenderTexture)\n    ---@field flush fun()\n    ---@field readback_texture fun(rt: RenderTexture, out: Texture): Texture\n    Graphics = {},\n\n    ---Static class\n    ---@class Physics\n    ---@field create_box_collider fun(transform: Transform, isStatic: boolean): Collider\n    ---@field create_sphere_collider fun(position: Vec3, radius: number, isStatic: boolean): Collider\n    ---@field add_collider fun(collider: Collider, isActive: boolean)\n    Physics = {},\n\n    ---Static class\n    ---@class Collision\n    ---@field aabb_vs_aabb fun(a: AABB, b: AABB): boolean\n    Collision = {},\n\n    ---Static class\n    ---@class Keyboard\n    ---@field A integer\n    ---@field B integer\n    ---@field C integer\n    ---@field D integer\n    ---@field E integer\n    ---@field F integer\n    ---@field G integer\n    ---@field H integer\n    ---@field I integer\n    ---@field J integer\n    ---@field K integer\n    ---@field L integer\n    ---@field M integer\n    ---@field N integer\n    ---@field O integer\n    ---@field P integer\n    ---@field Q integer\n    ---@field R integer\n    ---@field S integer\n    ---@field T integer\n    ---@field U integer\n    ---@field V integer\n    ---@field W integer\n    ---@field X integer\n    ---@field Y integer\n    ---@field Z integer\n    ---@field Key0 integer\n    ---@field Key1 integer\n    ---@field Key2 integer\n    ---@field Key3 integer\n    ---@field Key4 integer\n    ---@field Key5 integer\n    ---@field Key6 integer\n    ---@field Key7 integer\n    ---@field Key8 integer\n    ---@field Key9 integer\n    ---@field F1 integer\n    ---@field F2 integer\n    ---@field F3 integer\n    ---@field F4 integer\n    ---@field F5 integer\n    ---@field F6 integer\n    ---@field F7 integer\n    ---@field F8 integer\n    ---@field F9 integer\n    ---@field F10 integer\n    ---@field F11 integer\n    ---@field F12 integer\n    ---@field UP integer\n    ---@field DOWN integer\n    ---@field LEFT integer\n    ---@field RIGHT integer\n    ---@field ESCAPE integer\n    ---@field SPACE integer\n    ---@field BACKSPACE integer\n    ---@field TAB integer\n    ---@field RETURN integer\n    ---@field LSHIFT integer\n    ---@field RSHIFT integer\n    ---@field LCTRL integer\n    ---@field RCTRL integer\n    ---@field LALT integer\n    ---@field is_pressed fun(scancode: integer): boolean\n    ---@field is_released fun(scancode: integer): boolean\n    ---@field is_down fun(scancode: integer): boolean\n    Keyboard = {},\n\n    ---Static class\n    ---@class Mouse\n    ---@field LEFT integer\n    ---@field RIGHT integer\n    ---@field MIDDLE integer\n    ---@field X1 integer\n    ---@field X2 integer\n    ---@field is_pressed fun(btn: integer): boolean\n    ---@field is_released fun(btn: integer): boolean\n    ---@field is_down fun(btn: integer): boolean\n    ---@field get_position fun(): Vec2\n    ---@field get_position_on_scene fun(): Vec2\n    ---@field set_position fun(pos: Vec2)\n    ---@field set_position_on_scene fun(pos: Vec2)\n    ---@field get_scroll_wheel fun(): number\n    ---@field hide_cursor fun(isHide: boolean)\n    ---@field set_relative fun(isRelative: boolean)\n    Mouse = {},\n\n    ---Static class\n    ---@class GamePad\n    ---@field INVALID integer\n    ---@field A integer\n    ---@field B integer\n    ---@field X integer\n    ---@field Y integer\n    ---@field BACK integer\n    ---@field GUIDE integer\n    ---@field START integer\n    ---@field LEFTSTICK integer\n    ---@field RIGHTSTICK integer\n    ---@field LEFTSHOULDER integer\n    ---@field RIGHTSHOULDER integer\n    ---@field DPAD_UP integer\n    ---@field DPAD_DOWN integer\n    ---@field DPAD_LEFT integer\n    ---@field DPAD_RIGHT integer\n    ---@field MISC1 integer\n    ---@field PADDLE1 integer\n    ---@field PADDLE2 integer\n    ---@field PADDLE3 integer\n    ---@field PADDLE4 integer\n    ---@field TOUCHPAD integer\n    ---@field is_pressed fun(btn: integer): boolean\n    ---@field is_released fun(btn: integer): boolean\n    ---@field is_down fun(btn: integer): boolean\n    ---@field get_left_stick fun(): Vec2\n    ---@field get_right_stick fun(): Vec2\n    ---@field is_connected fun(): boolean\n    Gamepad = {},\n\n    ---Static class\n    ---@class Periodic\n    ---@field sin0_1 fun(t1: number,t2:number): number\n    ---@field cos0_1 fun(t1: number,t2:number): number\n    Periodic = {},\n\n    ---Static class\n    ---@class Time\n    ---@field seconds fun(): number\n    ---@field milli fun(): integer\n    ---@field deltatime fun(): number\n    Time = {},\n\n    ---Static class\n    ---@class Logger\n    ---@field verbose fun(msg: string)\n    ---@field info fun(msg: string)\n    ---@field error fun(msg: string)\n    ---@field warn fun(msg: string)\n    ---@field critical fun(msg: string)\n    Logger = {}\n}\n</code></pre>"},{"location":"en-us/tutorial/","title":"Under construction...","text":""},{"location":"ja-jp/","title":"Sinen","text":""},{"location":"ja-jp/#_1","title":"\u6982\u8981","text":"<p>Sinen\u306f\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059</p> <p> </p>"},{"location":"ja-jp/#_2","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3","text":"<p>Discord</p>"},{"location":"ja-jp/#_3","title":"\u6574\u5099\u4e2d...","text":""},{"location":"ja-jp/cpp_api/","title":"C++ API","text":"<p>https://astomih.github.io/sinen/doxygen/</p>"},{"location":"ja-jp/lua_api/","title":"Lua API","text":"<pre><code>---@diagnostic disable: duplicate-index, lowercase-global, unused-local\n---@class sn\nsn = {\n    ---@class Vec3\n    ---@field x number\n    ---@field y number\n    ---@field z number\n    ---@field copy fun(self: Vec3): Vec3\n    ---@field length fun(self: Vec3): number\n    ---@field forward fun(self: Vec3, rotation: Vec3): Vec3\n    ---@field normalize fun(self: Vec3): Vec3\n    ---@field dot fun(self: Vec3, other: Vec3): number\n    ---@field cross fun(self: Vec3, other: Vec3): Vec3\n    ---@field lerp fun(self: Vec3, other: Vec3, t: number): Vec3\n    ---@field reflect fun(self: Vec3, n: Vec3): Vec3\n    ---@operator add(Vec3): Vec3\n    ---@operator sub(Vec3): Vec3\n    ---@operator mul(Vec3): Vec3\n    ---@operator div(Vec3): Vec3\n    ---@param x number?\n    ---@param y number?\n    ---@param z number?\n    ---@return Vec3\n    Vec3 = function(x, y, z) return {} end,\n\n    ---@param value number\n    ---@return Vec3\n    ---Initializes a Vec3 with the same value for x, y, z.\n    Vec3 = function(value) return {} end,\n\n    ---@class Vec3i\n    ---@field x integer\n    ---@field y integer\n    ---@field z integer\n    ---@operator add(Vec3i): Vec3i\n    ---@operator sub(Vec3i): Vec3i\n    ---@param x integer?\n    ---@param y integer?\n    ---@param z integer?\n    ---@return Vec3i\n    Vec3i = function(x, y, z)\n        return {}\n    end,\n\n    ---@param value integer\n    ---@return Vec3i\n    ---Initializes a Vec3i with the same value for x, y, z.\n    Vec3i = function(value)\n        return {}\n    end,\n\n    ---@class Vec2\n    ---@field x number\n    ---@field y number\n    ---@field copy fun(self: Vec2): Vec2\n    ---@field length fun(self: Vec2): number\n    ---@field normalize fun(self: Vec2): Vec2\n    ---@field dot fun(self: Vec2, other: Vec2): number\n    ---@field lerp fun(self: Vec2, other: Vec2, t: number): Vec2\n    ---@field reflect fun(self: Vec2, n: Vec2): Vec2\n    ---@operator add(Vec2): Vec2\n    ---@operator sub(Vec2): Vec2\n    ---@operator mul(Vec2): Vec2\n    ---@operator div(Vec2): Vec2\n    ---@param x number?\n    ---@param y number?\n    ---@return Vec2\n    Vec2 = function(x, y) return {} end,\n\n    ---@param value number\n    ---@return Vec2\n    ---Initializes a Vec2 with the same value for x, y.\n    Vec2 = function(value) return {} end,\n\n    ---@class Vec2i\n    ---@field x integer\n    ---@field y integer\n    ---@operator add(Vec2i): Vec2i\n    ---@operator sub(Vec2i): Vec2i\n    ---@param x integer?\n    ---@param y integer?\n    ---@return Vec2i\n    Vec2i = function(x, y) return {} end,\n\n    ---@param value integer\n    ---@return Vec2i\n    ---Initializes a Vec2i with the same value for x, y.\n    Vec2i = function(value) return {} end,\n\n    ---@class Texture\n    ---@field fill fun(self: Texture, color: Color)\n    ---@field blend fun(self: Texture, color: Color)\n    ---@field copy fun(self: Texture): Texture\n    ---@field load fun(self: Texture, path: string)\n    ---@field size fun(self: Texture): Vec2\n    ---@return Texture\n    Texture = function() return {} end,\n\n    ---@class Material\n    ---Set Texture. index is 1-based, optional.\n    ---@field set_texture fun(self:Material, texture: Texture, index: integer?)\n    ---@field append_texture fun(self: Material, texture: Texture)\n    ---@field clear fun(self: Material)\n    ---@field get_texture fun(self: Material, index: integer): Texture\n    ---@return Material\n    Material = function() return {} end,\n\n    ---@class RenderTexture\n    ---@field create fun(self: RenderTexture, x: integer, y: integer)\n    ---@return RenderTexture\n    RenderTexture = function() return {} end,\n\n    ---@class Music\n    ---@field load fun(self: Music, path: string)\n    ---@field play fun(self: Music)\n    ---@field set_volume fun(self: Music, volume: number)\n    ---@return Music\n    Music = function() return {} end,\n\n    ---@class Sound\n    ---@field load fun(self: Sound, path: string)\n    ---@field play fun(self: Sound)\n    ---@field set_volume fun(self: Sound, volume: number)\n    ---@field set_pitch fun(self: Sound, pitch: number)\n    ---@field set_listener fun(self: Sound, position: Vec3)\n    ---@field set_position fun(self: Sound, position: Vec3)\n    ---@return Sound\n    Sound = function() return {} end,\n\n    ---@class Camera\n    ---@field lookat fun(self: Camera, position: Vec3, target: Vec3, up: Vec3)\n    ---@field perspective fun(self: Camera, fov: number, aspect: number, near: number, far: number)\n    ---@field orthographic fun(self: Camera, left: number, right: number, bottom: number, top: number, near: number, far: number)\n    ---@field get_position fun(self: Camera): Vec3\n    ---@field get_target fun(self: Camera): Vec3\n    ---@field get_up fun(self: Camera): Vec3\n    ---@field is_aabb_in_frustum fun(self: Camera, aabb: AABB): boolean\n    Camera = function() end,\n\n    ---@class Camera2D\n    ---@field resize fun(self: Camera2D, size: Vec2)\n    ---@field window_ratio fun(self: Camera2D): Vec2\n    ---@field inv_window_ratio fun(self: Camera2D): Vec2\n    ---@field size fun(self: Camera2D): Vec2\n    ---@field half fun(self: Camera2D): Vec2\n    Camera2D = function() end,\n\n    ---@class Model\n    ---@field get_aabb fun(self: Model): AABB\n    ---@field load fun(self: Model, path: string)\n    ---@field load_sprite fun(self: Model)\n    ---@field load_box fun(self: Model)\n    ---@field get_bone_uniform_data fun(self: Model): UniformData\n    ---@field play fun(self: Model, positon: number)\n    ---@field update fun(self: Model, delta: number)\n    ---@return Model\n    Model = function() return {} end,\n\n    ---@class AABB\n    ---@field min Vec3\n    ---@field max Vec3\n    ---@field update_world fun(self: AABB, position: Vec3, scale: Vec3, modelAABB: AABB)\n    ---@return AABB\n    AABB = function() return {} end,\n\n    ---@class Timer\n    ---@field start fun(self: Timer)\n    ---@field stop fun(self: Timer)\n    ---@field is_started fun(self: Timer): boolean\n    ---@field set_time fun(self: Timer, time: number)\n    ---@field check fun(self: Timer): boolean\n    Timer = function() end,\n\n    ---@class UniformData\n    ---@field add fun(self: UniformData, value: any)\n    ---@field change fun(self: UniformData, index: integer, value: number)\n    ---@return UniformData\n    UniformData = function() return {} end,\n\n    ---@class Shader\n    ---@field load_vertex_shader fun(self: Shader, path: string, uniform_count: integer)\n    ---@field load_fragment_shader fun(self: Shader, path: string, uniform_count: integer)\n    ---@field compile_load_vertex_shader fun(self: Shader, source: string, uniform_count: integer)\n    ---@field compile_load_fragment_shader fun(self: Shader, source: string, uniform_count: integer)\n    ---@return Shader\n    Shader = function() return {} end,\n\n    ---@class Font\n    ---@field load fun(self: Font, size: integer, path: string?): nil\n    ---@field render_text fun(self: Font, texture: Texture, text: string, color: Color): Texture\n    ---@field resize fun(self: Font, size: integer)\n    ---@return Font\n    Font = function() return {} end,\n\n    ---@class Color\n    ---@field r number\n    ---@field g number\n    ---@field b number\n    ---@field a number\n    ---@param r number\n    ---@param g number\n    ---@param b number\n    ---@param a number\n    ---@return Color\n    Color = function(r, g, b, a) return {} end,\n\n    ---@return Color\n    Color = function() return {} end,\n\n    ---@class Draw2D\n    ---@field scale Vec2\n    ---@field position Vec2\n    ---@field rotation number\n    ---@field material Material\n    ---@field add fun(self: Draw2D, drawable: any)\n    ---@field at fun(self: Draw2D, x: number, y: number)\n    ---@field clear fun(self: Draw2D)\n    ---@param texture Texture?\n    ---@return Draw2D\n    Draw2D = function(texture) return {} end,\n\n    ---@class Draw3D\n    ---@field scale Vec3\n    ---@field position Vec3\n    ---@field rotation Vec3\n    ---@field material Material\n    ---@field model Model\n    ---@field isDrawDepth boolean\n    ---@field add fun(self: Draw3D, positon: Vec3, rotation: Vec3, scale: Vec3)\n    ---@field at fun(self: Draw3D, x: number, y: number, z: number)\n    ---@field clear fun(self: Draw3D)\n    ---@param texture Texture?\n    ---@return Draw3D\n    Draw3D = function(texture) return {} end,\n\n    ---@class Grid\n    ---@field at fun(self: Grid, x: integer, y: integer): integer\n    ---@field set fun(self: Grid, x: integer, y: integer, v: integer)\n    ---@field width fun(self: Grid): integer\n    ---@field height fun(self: Grid): integer\n    ---@field size fun(self: Grid): integer\n    ---@field clear fun(self: Grid)\n    ---@field resize fun(self: Grid, w: integer, h: integer)\n    ---@field fill fun(self: Grid, value: integer)\n    ---@param w integer\n    ---@param h integer\n    ---@return Grid\n    Grid = function(w, h) return {} end,\n\n    ---@class BFSGrid\n    ---@field width fun(self: BFSGrid): integer\n    ---@field height fun(self: BFSGrid): integer\n    ---@field find_path fun(self: BFSGrid, start: Vec2i, end_: Vec2i): any\n    ---@field trace fun(self: BFSGrid): Vec2\n    ---@field traceable fun(self: BFSGrid): boolean\n    ---@field reset fun(self: BFSGrid)\n    ---@param grid Grid\n    ---@return BFSGrid\n    BFSGrid = function(grid)\n        return {}\n    end,\n\n    ---@class GraphicsPipeline2D\n    ---@field set_vertex_shader fun(self: GraphicsPipeline2D, shader: Shader)\n    ---@field set_fragment_shader fun(self: GraphicsPipeline2D, shader: Shader)\n    ---@field build fun(self: GraphicsPipeline2D)\n    ---@return GraphicsPipeline2D\n    GraphicsPipeline2D = function() return {} end,\n\n    ---@class GraphicsPipeline3D\n    ---@field set_vertex_shader fun(self: GraphicsPipeline3D, shader: Shader)\n    ---@field set_vertex_instanced_shader fun(self: GraphicsPipeline3D, shader: Shader)\n    ---@field set_fragment_shader fun(self: GraphicsPipeline3D, shader: Shader)\n    ---@field set_animation fun(self: GraphicsPipeline3D, anim: any)\n    ---@field build fun(self: GraphicsPipeline3D)\n    ---@return GraphicsPipeline3D\n    GraphicsPipeline3D = function() return {} end,\n\n    ---@class Rect\n    ---@field x number\n    ---@field y number\n    ---@field width number\n    ---@field height number\n    ---@param x number?\n    ---@param y number?\n    ---@param width number?\n    ---@param height number?\n    ---@return Rect\n    Rect = function(x, y, width, height) return {} end,\n    ---@param position Vec2\n    ---@param size Vec2\n    ---@return Rect\n    Rect = function(position, size) return {} end,\n\n    ---@class Transform\n    ---@field position Vec3\n    ---@field rotation Vec3\n    ---@field scale Vec3\n    ---@return Transform\n    Transform = function() return {} end,\n\n    ---@class Collider\n    ---@field get_position fun(self: Collider): Vec3\n    ---@field get_velocity fun(self: Collider): Vec3\n    ---@field set_linear_velocity fun(self: Collider, velocity: Vec3)\n    Collider = {},\n\n    ---Static class\n    ---@class Script\n    ---@field load fun(path: string, basePath?: string)\n    Script = {},\n\n    ---Static class\n    ---@class FileSystem\n    ---@field enumerate_directory fun(path: string): table\n    FileSystem = {},\n\n    ---Static class\n    ---@class Random\n    ---@field get_range fun(a: number, b: number): number\n    ---@field get_int_range fun(a: number, b: number): number\n    Random = {},\n\n    ---Static class\n    ---@class Window\n    ---@field get_name fun(): string\n    ---@field size fun(): Vec2\n    ---@field half fun(): Vec2\n    ---@field resize fun(size: Vec2)\n    ---@field set_fullscreen fun(full: boolean)\n    ---@field rename fun(name: string)\n    ---@field resized fun(): boolean\n    Window = {},\n\n    ---Static class\n    ---@class Graphics\n    ---@field draw2d fun(draw2D: Draw2D)\n    ---@field draw3d fun(draw3D: Draw3D)\n    ---@field draw_rect fun(rect: Rect, color: Color, angle: number?)\n    ---@field draw_image fun(texture: Texture, rect: Rect, angle: number?)\n    ---@field draw_text fun(text: string, position: Vec2, color: Color?, fontSize: number?, angle: number?)\n    ---@field draw_model fun(model: Model, transform: Transform, material: Material)\n    ---@field set_camera fun(camera: Camera)\n    ---@field get_camera fun(): Camera\n    ---@field set_camera2d fun(camera: Camera2D)\n    ---@field get_camera2d fun(): Camera2D\n    ---@field get_clear_color fun(): Color\n    ---@field set_clear_color fun(c: Color)\n    ---@field bind_pipeline2d fun(pipe: GraphicsPipeline2D)\n    ---@field bind_default_pipeline2d fun()\n    ---@field bind_pipeline3d fun(pipe: GraphicsPipeline3D)\n    ---@field bind_default_pipeline3d fun()\n    ---@field set_uniform_data fun(binding: integer, data: UniformData)\n    ---@field set_render_target fun(rt: RenderTexture)\n    ---@field flush fun()\n    ---@field readback_texture fun(rt: RenderTexture, out: Texture): Texture\n    Graphics = {},\n\n    ---Static class\n    ---@class Physics\n    ---@field create_box_collider fun(transform: Transform, isStatic: boolean): Collider\n    ---@field create_sphere_collider fun(position: Vec3, radius: number, isStatic: boolean): Collider\n    ---@field add_collider fun(collider: Collider, isActive: boolean)\n    Physics = {},\n\n    ---Static class\n    ---@class Collision\n    ---@field aabb_vs_aabb fun(a: AABB, b: AABB): boolean\n    Collision = {},\n\n    ---Static class\n    ---@class Keyboard\n    ---@field A integer\n    ---@field B integer\n    ---@field C integer\n    ---@field D integer\n    ---@field E integer\n    ---@field F integer\n    ---@field G integer\n    ---@field H integer\n    ---@field I integer\n    ---@field J integer\n    ---@field K integer\n    ---@field L integer\n    ---@field M integer\n    ---@field N integer\n    ---@field O integer\n    ---@field P integer\n    ---@field Q integer\n    ---@field R integer\n    ---@field S integer\n    ---@field T integer\n    ---@field U integer\n    ---@field V integer\n    ---@field W integer\n    ---@field X integer\n    ---@field Y integer\n    ---@field Z integer\n    ---@field Key0 integer\n    ---@field Key1 integer\n    ---@field Key2 integer\n    ---@field Key3 integer\n    ---@field Key4 integer\n    ---@field Key5 integer\n    ---@field Key6 integer\n    ---@field Key7 integer\n    ---@field Key8 integer\n    ---@field Key9 integer\n    ---@field F1 integer\n    ---@field F2 integer\n    ---@field F3 integer\n    ---@field F4 integer\n    ---@field F5 integer\n    ---@field F6 integer\n    ---@field F7 integer\n    ---@field F8 integer\n    ---@field F9 integer\n    ---@field F10 integer\n    ---@field F11 integer\n    ---@field F12 integer\n    ---@field UP integer\n    ---@field DOWN integer\n    ---@field LEFT integer\n    ---@field RIGHT integer\n    ---@field ESCAPE integer\n    ---@field SPACE integer\n    ---@field BACKSPACE integer\n    ---@field TAB integer\n    ---@field RETURN integer\n    ---@field LSHIFT integer\n    ---@field RSHIFT integer\n    ---@field LCTRL integer\n    ---@field RCTRL integer\n    ---@field LALT integer\n    ---@field is_pressed fun(scancode: integer): boolean\n    ---@field is_released fun(scancode: integer): boolean\n    ---@field is_down fun(scancode: integer): boolean\n    Keyboard = {},\n\n    ---Static class\n    ---@class Mouse\n    ---@field LEFT integer\n    ---@field RIGHT integer\n    ---@field MIDDLE integer\n    ---@field X1 integer\n    ---@field X2 integer\n    ---@field is_pressed fun(btn: integer): boolean\n    ---@field is_released fun(btn: integer): boolean\n    ---@field is_down fun(btn: integer): boolean\n    ---@field get_position fun(): Vec2\n    ---@field get_position_on_scene fun(): Vec2\n    ---@field set_position fun(pos: Vec2)\n    ---@field set_position_on_scene fun(pos: Vec2)\n    ---@field get_scroll_wheel fun(): number\n    ---@field hide_cursor fun(isHide: boolean)\n    ---@field set_relative fun(isRelative: boolean)\n    Mouse = {},\n\n    ---Static class\n    ---@class GamePad\n    ---@field INVALID integer\n    ---@field A integer\n    ---@field B integer\n    ---@field X integer\n    ---@field Y integer\n    ---@field BACK integer\n    ---@field GUIDE integer\n    ---@field START integer\n    ---@field LEFTSTICK integer\n    ---@field RIGHTSTICK integer\n    ---@field LEFTSHOULDER integer\n    ---@field RIGHTSHOULDER integer\n    ---@field DPAD_UP integer\n    ---@field DPAD_DOWN integer\n    ---@field DPAD_LEFT integer\n    ---@field DPAD_RIGHT integer\n    ---@field MISC1 integer\n    ---@field PADDLE1 integer\n    ---@field PADDLE2 integer\n    ---@field PADDLE3 integer\n    ---@field PADDLE4 integer\n    ---@field TOUCHPAD integer\n    ---@field is_pressed fun(btn: integer): boolean\n    ---@field is_released fun(btn: integer): boolean\n    ---@field is_down fun(btn: integer): boolean\n    ---@field get_left_stick fun(): Vec2\n    ---@field get_right_stick fun(): Vec2\n    ---@field is_connected fun(): boolean\n    Gamepad = {},\n\n    ---Static class\n    ---@class Periodic\n    ---@field sin0_1 fun(t1: number,t2:number): number\n    ---@field cos0_1 fun(t1: number,t2:number): number\n    Periodic = {},\n\n    ---Static class\n    ---@class Time\n    ---@field seconds fun(): number\n    ---@field milli fun(): integer\n    ---@field deltatime fun(): number\n    Time = {},\n\n    ---Static class\n    ---@class Logger\n    ---@field verbose fun(msg: string)\n    ---@field info fun(msg: string)\n    ---@field error fun(msg: string)\n    ---@field warn fun(msg: string)\n    ---@field critical fun(msg: string)\n    Logger = {}\n}\n</code></pre>"},{"location":"ja-jp/tutorial/","title":"\u6574\u5099\u4e2d...","text":""}]}