"""Sinen is still in ALPHA stage, so the API may change in the future."""

# ignore all missing imports
# type: ignore

from typing import Any, Optional, overload

class Vec3:
    x: float
    y: float
    z: float

    def __init__(self, x: float = 0, y: float = 0, z: float = 0): ...
    def __add__(self, other: "Vec3") -> "Vec3": ...
    def __sub__(self, other: "Vec3") -> "Vec3": ...
    def __mul__(self, other: "Vec3") -> "Vec3": ...
    def __truediv__(self, other: "Vec3") -> "Vec3": ...
    def copy(self) -> "Vec3": ...
    def length(self) -> float: ...
    def forward(self, rotation: "Vec3") -> "Vec3": ...
    def normalize(self) -> "Vec3": ...
    def dot(self, other: "Vec3") -> float: ...
    def cross(self, other: "Vec3") -> "Vec3": ...
    def lerp(self, other: "Vec3", t: float) -> "Vec3": ...
    def reflect(self, n: "Vec3") -> "Vec3": ...

class Vec2:
    x: float
    y: float

    def __init__(self, x: float = 0, y: float = 0): ...
    def __add__(self, other: "Vec2") -> "Vec2": ...
    def __sub__(self, other: "Vec2") -> "Vec2": ...
    def __mul__(self, other: "Vec2") -> "Vec2": ...
    def __truediv__(self, other: "Vec2") -> "Vec2": ...
    def copy(self) -> "Vec2": ...
    def length(self) -> float: ...
    def normalize(self) -> "Vec2": ...
    def dot(self, other: "Vec2") -> float: ...
    def lerp(self, other: "Vec2", t: float) -> "Vec2": ...
    def reflect(self, n: "Vec2") -> "Vec2": ...

class Texture:
    def __init__(self): ...
    def fill(self, color: "Color") -> None: ...
    def blend(self, color: "Color") -> None: ...
    def copy(self) -> "Texture": ...
    def load(self, path: str) -> None: ...
    def size(self) -> Vec2: ...

class Material:
    def __init__(self): ...
    def append_texture(self, texture: Texture) -> None: ...
    def clear(self) -> None: ...
    def get_texture(self, index: int) -> Texture: ...

class RenderTexture:
    def __init__(self): ...
    def create(self, x: int, y: int) -> None: ...

class Music:
    def __init__(self): ...
    def load(self, path: str) -> None: ...
    def play(self) -> None: ...
    def set_volume(self, volume: float) -> None: ...

class Sound:
    def __init__(self): ...
    def load(self, path: str) -> None: ...
    def play(self) -> None: ...
    def set_volume(self, volume: float) -> None: ...
    def set_pitch(self, pitch: float) -> None: ...
    def set_listener(self, position: Vec3) -> None: ...
    def set_position(self, position: Vec3) -> None: ...

class Camera:
    def __init__(self): ...
    def lookat(self, position: Vec3, target: Vec3, up: Vec3) -> None: ...
    def perspective(
        self, fov: float, aspect: float, near: float, far: float
    ) -> None: ...
    def orthographic(
        self,
        left: float,
        right: float,
        bottom: float,
        top: float,
        near: float,
        far: float,
    ) -> None: ...
    def position(self) -> Vec3: ...
    def target(self) -> Vec3: ...
    def up(self) -> Vec3: ...
    def is_aabb_in_frustum(self, aabb: "AABB") -> bool: ...

class Model:
    def __init__(self): ...
    def aabb(self) -> "AABB": ...
    def load(self, path: str) -> None: ...
    def load_sprite(self, path: str) -> None: ...
    def load_box(self, size: Vec3) -> None: ...
    def bone_uniform_data(self) -> "UniformData": ...
    def play(self, name: float) -> None: ...
    def update(self, delta: float) -> None: ...

class AABB:
    min: Vec3
    max: Vec3

    def __init__(self): ...
    def update_world(self, mat: Any) -> None: ...

class Timer:
    def __init__(self): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def is_started(self) -> bool: ...
    def set_time(self, time: float) -> None: ...
    def check(self) -> bool: ...

class Collider:
    def __init__(self): ...
    def get_position(self) -> Vec3: ...
    def get_velocity(self) -> Vec3: ...
    def set_linear_velocity(self, position: Vec3) -> None: ...

class UniformData:
    def __init__(self): ...
    def add(self, value: Any) -> None: ...
    def change(self, index: int, value: float) -> None: ...

class Shader:
    def __init__(self): ...
    def load_vertex_shader(self, path: str, uniform_count: int) -> None: ...
    def load_fragment_shader(self, path: str, uniform_count: int) -> None: ...
    def compile_and_load_vertex_shader(
        self, source: str, uniform_count: int
    ) -> None: ...
    def compile_and_load_fragment_shader(
        self, source: str, uniform_count: int
    ) -> None: ...

class Font:
    def __init__(self): ...
    @overload
    def load(self, size: int) -> None: ...
    @overload
    def load(self, size: int, path: str) -> None: ...
    def render_text(self, texture: Texture, text: str, color: "Color") -> Texture: ...
    def resize(self, size: int) -> None: ...

class Color:
    r: float
    g: float
    b: float
    a: float

    def __init__(self, r: float = 0, g: float = 0, b: float = 0, a: float = 1): ...

class Transform:
    position: Vec3
    rotation: Vec3
    scale: Vec3

    def __init__(self): ...

class Draw2D:
    scale: Vec2
    position: Vec2  # 2D position in center of the screen
    rotation: float
    material: Material

    def __init__(self, texture: Texture): ...
    def add(self, drawable: Any) -> None: ...
    def at(self, x: float, y: float) -> None: ...
    def clear(self) -> None: ...

class Draw3D:
    scale: Vec3
    position: Vec3
    rotation: Vec3
    material: Material
    model: Model
    is_draw_depth: bool

    def __init__(self): ...
    def add(self, drawable: Any) -> None: ...
    def at(self, x: float, y: float, z: float) -> None: ...
    def clear(self) -> None: ...

class Grid:
    def __init__(self, w: int, h: int): ...
    def at(self, x: int, y: int) -> int: ...
    def set(self, x: int, y: int, v: int) -> None: ...
    def width(self) -> int: ...
    def height(self) -> int: ...
    def size(self) -> int: ...
    def clear(self) -> None: ...
    def resize(self, w: int, h: int) -> None: ...
    def fill(self, value: int) -> None: ...

class BFSGrid:
    def __init__(self, grid: Grid): ...
    def width(self) -> int: ...
    def height(self) -> int: ...
    def find_path(self, start: Vec2, end: Vec2) -> Any: ...
    def trace(self) -> Vec2: ...
    def traceable(self) -> bool: ...
    def reset(self) -> None: ...

class GraphicsPipeline2D:
    def __init__(self): ...
    def set_vertex_shader(self, shader: Shader) -> None: ...
    def set_fragment_shader(self, shader: Shader) -> None: ...
    def build(self) -> None: ...

class GraphicsPipeline3D:
    def __init__(self): ...
    def set_vertex_shader(self, shader: Shader) -> None: ...
    def set_vertex_instanced_shader(self, shader: Shader) -> None: ...
    def set_fragment_shader(self, shader: Shader) -> None: ...
    def set_animation(self, anim: Any) -> None: ...
    def build(self) -> None: ...

class Rect:
    x: float
    y: float
    width: float
    height: float
    def __init__(
        self, x: float = 0, y: float = 0, width: float = 0, height: float = 0
    ): ...

class Script:
    @staticmethod
    def load(path: str, dir: str) -> None: ...

class FileSystem:
    @staticmethod
    def enumerate_directory(path: str) -> list[str]: ...

class Random:
    @staticmethod
    def get_int_range(a: int, b: int) -> int: ...
    @staticmethod
    def get_float_range(a: float, b: float) -> float: ...

class Window:
    @staticmethod
    def name() -> str: ...
    @staticmethod
    def size() -> Vec2: ...
    @staticmethod
    def half() -> Vec2: ...
    @staticmethod
    def resize(size: Vec2) -> None: ...
    @staticmethod
    def set_fullscreen(full: bool) -> None: ...
    @staticmethod
    def rename(name: str) -> None: ...
    @staticmethod
    def resized() -> bool: ...

class Physics:
    @staticmethod
    def create_collider_box(
        size: Vec3, position: Vec3, is_dynamic: bool
    ) -> Collider: ...
    @staticmethod
    def create_collider_sphere(
        radius: float, position: Vec3, is_dynamic: bool
    ) -> Collider: ...
    @staticmethod
    def create_collider_capsule(
        radius: float, height: float, position: Vec3, is_dynamic: bool
    ) -> Collider: ...
    @staticmethod
    def add_collider(collider: Collider) -> None: ...

class Graphics:
    @staticmethod
    def draw_rect(rect: Rect, color: Color, angle: float) -> None: ...
    @staticmethod
    def draw_text(
        text: str, position: Vec2, color: Color, font_size: int, angle: float
    ) -> None: ...
    @staticmethod
    def draw_model(model: Model, transform: Transform, material: Material) -> None: ...
    @staticmethod
    def get_camera() -> Camera: ...
    @staticmethod
    def set_camera(camera: Camera) -> None: ...
    @staticmethod
    def get_camera_2d() -> Camera: ...
    @staticmethod
    def set_camera_2d(camera: Camera) -> None: ...
    @staticmethod
    def get_clear_color() -> Color: ...
    @staticmethod
    def set_clear_color(c: Color) -> None: ...
    @staticmethod
    def bind_pipeline2d(pipe: GraphicsPipeline2D) -> None: ...
    @staticmethod
    def bind_default_pipeline2d() -> None: ...
    @staticmethod
    def bind_pipeline3d(pipe: GraphicsPipeline3D) -> None: ...
    @staticmethod
    def bind_default_pipeline3d() -> None: ...
    @staticmethod
    def set_uniform_data(binding: int, data: UniformData) -> None: ...
    @staticmethod
    def begin_target2d(rt: RenderTexture) -> None: ...
    @staticmethod
    def begin_target3d(rt: RenderTexture) -> None: ...
    @staticmethod
    def end_target(rt: RenderTexture, texture_ref: Texture) -> None: ...
    @staticmethod
    def draw2d(draw: Draw2D) -> None: ...

class Collision:
    @staticmethod
    def aabb_aabb(a: AABB, b: AABB) -> bool: ...

class Keyboard:
    A: int
    B: int
    C: int
    D: int
    E: int
    F: int
    G: int
    H: int
    I: int
    J: int
    K: int
    L: int
    M: int
    N: int
    O: int
    P: int
    Q: int
    R: int
    S: int
    T: int
    U: int
    V: int
    W: int
    X: int
    Y: int
    Z: int
    Key0: int
    Key1: int
    Key2: int
    Key3: int
    Key4: int
    Key5: int
    Key6: int
    Key7: int
    Key8: int
    Key9: int
    F1: int
    F2: int
    F3: int
    F4: int
    F5: int
    F6: int
    F7: int
    F8: int
    F9: int
    F10: int
    F11: int
    F12: int
    UP: int
    DOWN: int
    LEFT: int
    RIGHT: int
    ESCAPE: int
    SPACE: int
    BACKSPACE: int
    TAB: int
    RETURN: int
    LSHIFT: int
    RSHIFT: int
    LCTRL: int
    RCTRL: int
    LALT: int

    def __init__(self): ...
    @staticmethod
    def is_pressed(scancode: int) -> bool: ...
    @staticmethod
    def is_released(scancode: int) -> bool: ...
    @staticmethod
    def is_down(scancode: int) -> bool: ...

class Mouse:
    LEFT: int
    RIGHT: int
    MIDDLE: int
    X1: int
    X2: int

    @staticmethod
    def is_pressed(btn: int) -> bool: ...
    @staticmethod
    def is_released(btn: int) -> bool: ...
    @staticmethod
    def is_down(btn: int) -> bool: ...
    @staticmethod
    def position() -> Vec2: ...
    @staticmethod
    def position_on_scene() -> Vec2: ...
    @staticmethod
    def set_position(pos: Vec2) -> None: ...
    @staticmethod
    def set_position_on_scene(pos: Vec2) -> None: ...
    @staticmethod
    def scroll_wheel() -> float: ...
    @staticmethod
    def hide_cursor() -> None: ...

class GamePad:
    INVALID: int
    A: int
    B: int
    X: int
    Y: int
    BACK: int
    GUIDE: int
    START: int
    LEFTSTICK: int
    RIGHTSTICK: int
    LEFTSHOULDER: int
    RIGHTSHOULDER: int
    DPAD_UP: int
    DPAD_DOWN: int
    DPAD_LEFT: int
    DPAD_RIGHT: int
    MISC1: int
    PADDLE1: int
    PADDLE2: int
    PADDLE3: int
    PADDLE4: int
    TOUCHPAD: int

    def __init__(self): ...
    @staticmethod
    def is_pressed(btn: int) -> bool: ...
    @staticmethod
    def is_released(btn: int) -> bool: ...
    @staticmethod
    def is_down(btn: int) -> bool: ...
    @staticmethod
    def left_stick() -> Vec2: ...
    @staticmethod
    def right_stick() -> Vec2: ...
    @staticmethod
    def is_connected() -> bool: ...

class Periodic:
    def __init__(self): ...
    @staticmethod
    def sin0_1(time: float) -> float: ...
    @staticmethod
    def cos0_1(time: float) -> float: ...

class Time:
    def __init__(self): ...
    @staticmethod
    def seconds() -> float: ...
    @staticmethod
    def milli() -> int: ...
    @staticmethod
    def deltatime() -> float: ...

class Logger:
    @staticmethod
    def verbose(msg: str) -> None: ...
    @staticmethod
    def debug(msg: str) -> None: ...
    @staticmethod
    def info(msg: str) -> None: ...
    @staticmethod
    def error(msg: str) -> None: ...
    @staticmethod
    def warn(msg: str) -> None: ...
    @staticmethod
    def critical(msg: str) -> None: ...
